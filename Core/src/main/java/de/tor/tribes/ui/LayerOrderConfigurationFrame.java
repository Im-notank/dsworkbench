/* 
 * Copyright 2015 Torridity.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.tor.tribes.ui;

import de.tor.tribes.types.Layer;
import de.tor.tribes.ui.components.LayerOrderPanel;
import de.tor.tribes.util.interfaces.LayerOrderTooltipListener;
import de.tor.tribes.util.translation.TranslationManager;
import de.tor.tribes.util.translation.Translator;
import java.awt.BorderLayout;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;

/**
 *
 * @author Torridity
 */
public class LayerOrderConfigurationFrame extends javax.swing.JFrame implements LayerOrderTooltipListener {

    private static Translator trans = TranslationManager.getTranslator("ui.LayerOrderConfigurationFrame");
    
    private static LayerOrderConfigurationFrame SINGLETON = null;
    private HashMap<Layer, String> tooltips = new HashMap<>();
    private Layer tooltipLayer = null;
    private String generalInformation = null;
    private LayerOrderPanel panel = null;

    @Override
    public void fireShowTooltipEvent(Layer pLayer) {
        if (pLayer == null) {
            tooltipLayer = null;
            jTextPane1.setText(generalInformation);
        }
        if (tooltipLayer != null) {
            if (!tooltipLayer.equals(pLayer)) {
                jTextPane1.setText(tooltips.get(pLayer));
                tooltipLayer = pLayer;
            }
        } else {
            if (pLayer != null) {
                jTextPane1.setText(tooltips.get(pLayer));
                tooltipLayer = pLayer;
            } else {
                jTextPane1.setText(generalInformation);
                tooltipLayer = null;
            }
        }
    }

    public static synchronized LayerOrderConfigurationFrame getSingleton() {
        if (SINGLETON == null) {
            SINGLETON = new LayerOrderConfigurationFrame();
        }
        return SINGLETON;
    }

    /** Creates new form LayerOrderConfigurationFrame */
    LayerOrderConfigurationFrame() {
        initComponents();
        panel = new LayerOrderPanel(this);
        jPanel1.add(panel, BorderLayout.CENTER);

        buildTooltipMap();
        jTextPane1.setText(generalInformation);
    }

    private void buildTooltipMap() {

        generalInformation = trans.get("generalInformation");

        URL warnURL = null;
        try {
            warnURL = new File("./graphics/icons/warning.png").toURI().toURL();
        } catch (MalformedURLException ignored) {
        }
        tooltips.put(Layer.MARKERS, trans.get("MARKERS").replaceAll("\\{warnURL\\}", warnURL.toString()));
        tooltips.put(Layer.VILLAGES, trans.get("VILLAGES").replaceAll("\\{warnURL\\}", warnURL.toString()));
        tooltips.put(Layer.DRAWINGS, trans.get("DRAWINGS").replaceAll("\\{warnURL\\}", warnURL.toString()));
        tooltips.put(Layer.VILLAGE_SYMBOLS, trans.get("VILLAGE_SYMBOLS").replaceAll("\\{warnURL\\}", warnURL.toString()));
        tooltips.put(Layer.TROOP_DENSITY, trans.get("TROOP_DENSITY").replaceAll("\\{warnURL\\}", warnURL.toString()));
        tooltips.put(Layer.NOTES_MARKER, trans.get("NOTES_MARKER").replaceAll("\\{warnURL\\}", warnURL.toString()));
        tooltips.put(Layer.ATTACKS, trans.get("ATTACKS").replaceAll("\\{warnURL\\}", warnURL.toString()));
        tooltips.put(Layer.SUPPORTS, trans.get("SUPPORTS").replaceAll("\\{warnURL\\}", warnURL.toString()));
        tooltips.put(Layer.CHURCH_RADIUS, trans.get("CHURCH_RADIUS").replaceAll("\\{warnURL\\}", warnURL.toString()));
        tooltips.put(Layer.WATCHTOWER_RADIUS, trans.get("WATCHTOWER_RADIUS").replaceAll("\\{warnURL\\}", warnURL.toString()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();

        setTitle("Zeichenebenen festlegen");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(400, 250));
        jPanel1.setMinimumSize(new java.awt.Dimension(400, 250));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 250));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(trans.get("Informationen")));

        jTextPane1.setContentType("text/html"); // NOI18N
        jTextPane1.setEditable(false);
        jScrollPane1.setViewportView(jTextPane1);

        jButton1.setText(trans.get("Schliessen"));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                fireCloseFrameEvent(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(309, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fireCloseFrameEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireCloseFrameEvent
        setVisible(false);
    }//GEN-LAST:event_fireCloseFrameEvent

    public String getLayerPropertyString() {
        return panel.getLayerPropertyString();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
