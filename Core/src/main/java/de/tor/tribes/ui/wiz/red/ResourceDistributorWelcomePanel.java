/* 
 * Copyright 2015 Torridity.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.tor.tribes.ui.wiz.red;

import de.tor.tribes.util.JOptionPaneHelper;
import de.tor.tribes.util.translation.TranslationManager;
import de.tor.tribes.util.translation.Translator;
import java.awt.event.ItemEvent;
import java.util.Map;
import javax.swing.ImageIcon;
import org.netbeans.spi.wizard.Wizard;
import org.netbeans.spi.wizard.WizardPage;
import org.netbeans.spi.wizard.WizardPanelNavResult;

/**
 *
 * @author Torridity
 */
public class ResourceDistributorWelcomePanel extends WizardPage {
    
    private static Translator trans = TranslationManager.getTranslator("ui.wiz.ResourceDistributorWelcomePanel");
    
    private static final String EQUAL_DISTIBUTION_HELP = trans.get("Welcome_Gleichverteilung");
    private static final String FILL_DISTIBUTION_HELP = trans.get("Welcome_verteilung");
    private static final String LOAD_HELP = trans.get("Welcome_vorherberechneterTransporte");
    private static ResourceDistributorWelcomePanel singleton = null;
    public static final String TYPE = "type";
    public final static Integer BALANCE_DISTRIBUTION = 0;
    public final static Integer FILL_DISTRIBUTION = 1;
    public final static Integer LOAD_DISTRIBUTION = 2;
    
    public static synchronized ResourceDistributorWelcomePanel getSingleton() {
        if (singleton == null) {
            singleton = new ResourceDistributorWelcomePanel();
        }
        return singleton;
    }

    /**
     * Creates new form WelcomePanel
     */
    ResourceDistributorWelcomePanel() {
        initComponents();
        jEqualButton.setIcon(new ImageIcon("./graphics/big/distribute_equal.png"));
        jFillButton.setIcon(new ImageIcon("./graphics/big/fill_distribution.png"));
        jLoadButton.setIcon(new ImageIcon("./graphics/big/load_transports.png"));
        jTextPane1.setText(EQUAL_DISTIBUTION_HELP);
    }
    
    public static String getDescription() {
        return trans.get("Willkommen");
    }
    
    public static String getStep() {
        return "id-welcome";
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jEqualButton = new javax.swing.JToggleButton();
        jFillButton = new javax.swing.JToggleButton();
        jLoadButton = new javax.swing.JToggleButton();

        setMinimumSize(new java.awt.Dimension(600, 500));
        setPreferredSize(new java.awt.Dimension(600, 500));
        setLayout(new java.awt.BorderLayout());

        jTextPane1.setEditable(false);
        jTextPane1.setContentType("text/html"); // NOI18N
        jTextPane1.setText(trans.get("Willkommen_Rohstoffverteiler"));
        jScrollPane1.setViewportView(jTextPane1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jEqualButton);
        jEqualButton.setSelected(true);
        jEqualButton.setMaximumSize(new java.awt.Dimension(80, 80));
        jEqualButton.setMinimumSize(new java.awt.Dimension(80, 80));
        jEqualButton.setPreferredSize(new java.awt.Dimension(80, 80));
        jEqualButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireMethodChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jEqualButton, gridBagConstraints);

        buttonGroup1.add(jFillButton);
        jFillButton.setMaximumSize(new java.awt.Dimension(80, 80));
        jFillButton.setMinimumSize(new java.awt.Dimension(80, 80));
        jFillButton.setPreferredSize(new java.awt.Dimension(80, 80));
        jFillButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireMethodChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jFillButton, gridBagConstraints);

        buttonGroup1.add(jLoadButton);
        jLoadButton.setMaximumSize(new java.awt.Dimension(80, 80));
        jLoadButton.setMinimumSize(new java.awt.Dimension(80, 80));
        jLoadButton.setPreferredSize(new java.awt.Dimension(80, 80));
        jLoadButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireMethodChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLoadButton, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void fireMethodChangeEvent(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fireMethodChangeEvent
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (evt.getSource() == jEqualButton) {
                jTextPane1.setText(EQUAL_DISTIBUTION_HELP);
            } else if (evt.getSource() == jFillButton) {
                jTextPane1.setText(FILL_DISTIBUTION_HELP);
            } else if (evt.getSource() == jLoadButton) {
                jTextPane1.setText(LOAD_HELP);
            }
        }
        
    }//GEN-LAST:event_fireMethodChangeEvent
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JToggleButton jEqualButton;
    private javax.swing.JToggleButton jFillButton;
    private javax.swing.JToggleButton jLoadButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public WizardPanelNavResult allowNext(String string, Map map, Wizard wizard) {
        if (jLoadButton.isSelected()) {
            if (!ResourceDistributorFinishPanel.getSingleton().loadTransports()) {
                JOptionPaneHelper.showWarningBox(ResourceDistributorWelcomePanel.this, trans.get("KeinegespeichertenTransporte"), trans.get("Warnung"));
                return WizardPanelNavResult.REMAIN_ON_PAGE;
            }
        }
        
        int type = BALANCE_DISTRIBUTION;
        if (jFillButton.isSelected()) {
            type = FILL_DISTRIBUTION;
        } else if (jLoadButton.isSelected()) {
            type = LOAD_DISTRIBUTION;
        }
        ResourceDistributorDataReadPanel.getSingleton().setup(type);
        map.put(TYPE, type);
        return WizardPanelNavResult.PROCEED;
    }
    
    @Override
    public WizardPanelNavResult allowBack(String string, Map map, Wizard wizard) {
        return WizardPanelNavResult.PROCEED;
        
    }
    
    @Override
    public WizardPanelNavResult allowFinish(String string, Map map, Wizard wizard) {
        return WizardPanelNavResult.PROCEED;
    }
}
