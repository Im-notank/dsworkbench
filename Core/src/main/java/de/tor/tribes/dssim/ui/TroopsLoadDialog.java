/* 
 * Copyright 2015 Torridity.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.tor.tribes.dssim.ui;

import de.tor.tribes.dssim.model.SimulatorTableModel;
import de.tor.tribes.io.TroopAmountFixed;
import de.tor.tribes.util.GlobalOptions;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Charon
 */
public class TroopsLoadDialog extends javax.swing.JDialog {
    private static Logger logger = LogManager.getLogger("TroopsLoadDialog");

    private final int LOAD_OFF_TYPE = 0;
    private final int LOAD_DEF_TYPE = 1;
    private static TroopsLoadDialog SINGLETON = null;
    private int type = LOAD_OFF_TYPE;
    
    private Map<String, TroopAmountFixed> storedTroopsOff = new HashMap<>();
    private Map<String, TroopAmountFixed> storedTroopsDeff = new HashMap<>();

    public static synchronized TroopsLoadDialog getSingleton() {
        if (SINGLETON == null) {
            SINGLETON = new TroopsLoadDialog(DSWorkbenchSimulatorFrame.getSingleton(), true);
        }
        return SINGLETON;
    }

    /** Creates new form TroopsSaveDialog */
    private TroopsLoadDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        if(GlobalOptions.getProperties().exists("sim.storedTroopsOff")) {
            String troops = GlobalOptions.getProperty("sim.storedTroopsOff");
            for(String part : troops.split(";")) {
                if(part.equals("")) continue;
                String name = part.substring(0, part.lastIndexOf("_"));
                String values = part.substring(part.lastIndexOf("_") + 1);

                TroopAmountFixed asAmount = new TroopAmountFixed();
                asAmount.loadFromProperty(values);
                storedTroopsOff.put(name, asAmount);
            }
        }
        
        if(GlobalOptions.getProperties().exists("sim.storedTroopsDeff")) {
            String troops = GlobalOptions.getProperty("sim.storedTroopsDeff");
            for(String part : troops.split(";")) {
                if(part.equals("")) continue;
                String name = part.substring(0, part.lastIndexOf("_"));
                String values = part.substring(part.lastIndexOf("_") + 1);

                TroopAmountFixed asAmount = new TroopAmountFixed();
                asAmount.loadFromProperty(values);
                storedTroopsDeff.put(name, asAmount);
            }
        }
        
        initComponents();
    }

    public void showLoadDefDialog() {
        setTitle("Deff laden");
        type = LOAD_DEF_TYPE;
        buildSetupList();
        setLocationRelativeTo(DSWorkbenchSimulatorFrame.getSingleton());
        setVisible(true);
    }

    public void showLoadOffDialog() {
        setTitle("Off laden");
        type = LOAD_OFF_TYPE;
        buildSetupList();
        setLocationRelativeTo(DSWorkbenchSimulatorFrame.getSingleton());
        setVisible(true);
    }
    
    public String[] getOffSetups() {
        return storedTroopsOff.keySet().toArray(new String[storedTroopsOff.size()]);
    }
    
    public String[] getDeffSetups() {
        return storedTroopsDeff.keySet().toArray(new String[storedTroopsDeff.size()]);
    }
    
    public void saveOff(String name, TroopAmountFixed troops) {
        storedTroopsOff.put(name, troops);
        saveToGlobalOptions();
    }
    
    public void saveDeff(String name, TroopAmountFixed troops) {
        storedTroopsDeff.put(name, troops);
        saveToGlobalOptions();
    }

    private void buildSetupList() {
        DefaultListModel model = new DefaultListModel();
        String[] setups = null;
        if (type == LOAD_OFF_TYPE) {
            setups = getOffSetups();
        } else {
            setups = getDeffSetups();
        }
        Arrays.sort(setups);
        for (String setup : setups) {
            model.addElement(setup);
        }
        jTroopSetupList.setModel(model);
        jTroopSetupList.setSelectedIndex(0);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLoadButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTroopSetupList = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();

        setAlwaysOnTop(true);
        setModal(true);

        jLabel1.setText("Bezeichnung");

        jLoadButton.setText("Laden");
        jLoadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireCloseEvent(evt);
            }
        });

        jButton2.setText("Abbrechen");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireCloseEvent(evt);
            }
        });

        jTroopSetupList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jTroopSetupList);

        jButton1.setText("Löschen");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireDeleteSetupEvent(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 12, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLoadButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLoadButton)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fireCloseEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireCloseEvent
        String name = (String) jTroopSetupList.getSelectedValue();

        if (evt.getSource() == jLoadButton) {
            if (name == null) {
                JOptionPane.showMessageDialog(this, "Bitte einen Eintrag auswählen.", "Warnung", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            TroopAmountFixed troops;
            if (type == LOAD_OFF_TYPE) {
                //save off
                SimulatorTableModel.getSingleton().setOff(storedTroopsOff.get(name), null);
            } else {
                //save def
                
                SimulatorTableModel.getSingleton().setDef(storedTroopsDeff.get(name), null);
            }
        }
        setVisible(false);
    }//GEN-LAST:event_fireCloseEvent

    private void fireDeleteSetupEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireDeleteSetupEvent
        String name = (String) jTroopSetupList.getSelectedValue();
        if (name == null) {
            JOptionPane.showMessageDialog(this, "Bitte einen Eintrag auswählen.", "Warnung", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (type == LOAD_OFF_TYPE) {
            //save off
            storedTroopsOff.remove(name);
        } else {
            //save def
            storedTroopsDeff.remove(name);
        }
        saveToGlobalOptions();
        buildSetupList();
    }//GEN-LAST:event_fireDeleteSetupEvent

    private void saveToGlobalOptions() {
        StringBuilder str = new StringBuilder();
        boolean first = true;
        for(Map.Entry<String, TroopAmountFixed> e : storedTroopsOff.entrySet()) {
            if(!first) str.append(";");
            str.append(e.getKey());
            str.append("_");
            str.append(e.getValue().toProperty());
            first = false;
        }
        GlobalOptions.getProperties().setProperty("sim.storedTroopsOff", str.toString());
        
        str = new StringBuilder();
        first = true;
        for(Map.Entry<String, TroopAmountFixed> e : storedTroopsDeff.entrySet()) {
            if(!first) str.append(";");
            str.append(e.getKey());
            str.append("_");
            str.append(e.getValue().toProperty());
            first = false;
        }
        GlobalOptions.getProperties().setProperty("sim.storedTroopsDeff", str.toString());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jLoadButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList jTroopSetupList;
    // End of variables declaration//GEN-END:variables
}
